---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: get-github-access-token
spec:
  params:
    - description: GitHub App ID
      name: github-app-id
      type: string
    - description: GitHub App Installation ID
      name: github-app-installation-id
      type: string
    - description: The Kubernet secret containing the private key for the GitHub App
      name: githubapp-secret-name
      type: string
  results:
    - name: githubapp-token
  steps:
    - name: get-token
      image: quay.io/okd/tekton-worker:latest
      env: 
        - name: PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.githubapp-secret-name)
              key: private.key
      script: |
        #!/usr/bin/env bash

         # Generate JWT for Github App
         thisdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

         set -o pipefail

         app_id="$(params.github-app-id)"
         app_private_key="$PRIVATE_KEY"

         header='{
             "alg": "RS256",
             "typ": "JWT"
         }'

         payload_template='{}'

         build_payload() {
                 jq -c \
                         --arg iat_str "$(date +%s)" \
                         --arg app_id "${app_id}" \
                 '
                 ($iat_str | tonumber) as $iat
                 | .iat = $iat
                 | .exp = ($iat + 300)
                 | .iss = ($app_id | tonumber)
                 ' <<< "${payload_template}" | tr -d '\n'
         }

         b64enc() { openssl enc -base64 -A | tr '+/' '-_' | tr -d '='; }

         json() { jq -c . | LC_CTYPE=C tr -d '\n'; }

         rs256_sign() { openssl dgst -binary -sha256 -sign <(printf '%s\n' "$1");
         }

         sign() {
             local algo payload sig
             algo=${1:-RS256}; algo=${algo^^}
             payload=$(build_payload) || return
             signed_content="$(json <<<"$header" | b64enc).$(json <<<"$payload" | b64enc)"
             sig=$(printf %s "$signed_content" | rs256_sign "$app_private_key" | b64enc)
             printf '%s.%s\n' "${signed_content}" "${sig}"
         }

         generated_jwt=$(sign)

         # show the jwt during testing
         #echo "Generated jwt: ${generated_jwt}"
         
         installation_id="$(params.github-app-installation-id)"

         github_api_url="https://api.github.com/app/installations/$installation_id/access_tokens"

         echo "Calling [${github_api_url}], result:"
         tokens=$(curl -s -X POST \
             -H "Authorization: Bearer ${generated_jwt}" \
             -H "Accept: application/vnd.github.v3+json" \
             "${github_api_url}" )

         #echo "Token info: $tokens"
         # # extract the token
         token=$(echo "$tokens" | jq -r '.token')
         printf "%s" "$token" > $(results.githubapp-token.path)
